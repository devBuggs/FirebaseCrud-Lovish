import {
  View,
  KeyboardAvoidingView,
  Platform,
  Dimensions,
  FlatList,
  Keyboard,
  TouchableOpacity,
  PermissionsAndroid,
} from 'react-native';
import React, {useEffect, useState} from 'react';
import styles from './styles';
import ChatHeader from '../../components/ChatHeader';
import {Textinput} from '../../components/Textinput';
import Attachment from 'react-native-vector-icons/Entypo';
import Send from 'react-native-vector-icons/Ionicons';
import Stop from 'react-native-vector-icons/Ionicons';
import Camera from 'react-native-vector-icons/Feather';
import Microphone from 'react-native-vector-icons/FontAwesome';
import {scale} from '../../util/screenSize';
import MessageCard from '../../components/MessageCard';
import {
  handleAudioUpload,
  handleDocsUpload,
  handleMediaUpload,
  loadMessages,
  sendChatMessage,
} from '../../apiconfig/firebaseapi';
import ImagePicker from '../../components/ImagePicker';
const {height} = Dimensions.get('window');
import firestore from '@react-native-firebase/firestore';
import DocumentPicker from 'react-native-document-picker';
import AudioRecorderPlayer, {
  AVEncoderAudioQualityIOSType,
  AVEncodingOption,
  AudioEncoderAndroidType,
  AudioSet,
  AudioSourceAndroidType,
  RecordBackType,
} from 'react-native-audio-recorder-player';

interface Message {
  sender: string;
  text: string;
  name: string;
  timestamp: any;
  imageUrl?: string | any;
  documentUrl?: string | any;
  audioUrl?: string | any;
}

const ChatDetailScreen = ({route}: any) => {
  const {name, image, currentuserId, otheruserId} = route.params;
  const [modalVisible, setModalVisible] = useState(false);
  const chatId =
    currentuserId < otheruserId
      ? `${currentuserId}_${otheruserId}`
      : `${otheruserId}_${currentuserId}`;

  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');

  const [isRecording, setIsRecording] = useState(false);
  const audioRecorderPlayer = new AudioRecorderPlayer();

  const [recordSecs, setrecordSecs] = useState(0);
  const [recordTime, setrecordTime] = useState('');

  const onStartRecord = React.useCallback(async () => {
    setIsRecording(true);

    if (Platform.OS === 'android') {
      try {
        const grants = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
        ]);
        console.log('write external stroage', grants);
        if (
          grants['android.permission.WRITE_EXTERNAL_STORAGE'] ===
            PermissionsAndroid.RESULTS.GRANTED ||
          grants['android.permission.READ_EXTERNAL_STORAGE'] ===
            PermissionsAndroid.RESULTS.GRANTED ||
          grants['android.permission.RECORD_AUDIO'] ===
            PermissionsAndroid.RESULTS.GRANTED
        ) {
          console.log('permissions granted');
        } else {
          console.log('All required permissions not granted');
          return;
        }
      } catch (err) {
        console.warn(err);
        return;
      }
    }
    const audioSet: AudioSet = {
      AudioEncoderAndroid: AudioEncoderAndroidType.AAC,
      AudioSourceAndroid: AudioSourceAndroidType.MIC,
      AVEncoderAudioQualityKeyIOS: AVEncoderAudioQualityIOSType.high,
      AVNumberOfChannelsKeyIOS: 2,
      AVFormatIDKeyIOS: AVEncodingOption.aac,
    };
    console.log('audioSet', audioSet);
    const uri = await audioRecorderPlayer.startRecorder(undefined, audioSet);
    audioRecorderPlayer.addRecordBackListener((e: RecordBackType) => {
      // console.log('record-back', e);
      setrecordSecs(e.currentPosition);
      setrecordTime(audioRecorderPlayer.mmssss(Math.floor(e.currentPosition)));
    });
    console.log('uri:', `${uri}`);
  }, []);
  const onStopRecord = React.useCallback(async () => {
    const result = await audioRecorderPlayer.stopRecorder();
    audioRecorderPlayer.removeRecordBackListener();
    setrecordSecs(0);
    console.log(result);
    setIsRecording(false);
    if (result) {
      const audioDownloadURL = await handleAudioUpload(result);
      if (audioDownloadURL) {
        sendChatMessage(
          chatId,
          currentuserId,
          name,
          '',
          '',
          '',
          audioDownloadURL,
        );
      } else {
        console.error('Failed to upload audio to Firebase Storage.');
      }
    } else {
      console.error('No audio recorded.');
    }
    playSound(result);
  }, []);
  const playSound = async (audioUrl: any) => {
    console.log('fsdf', audioUrl);

    try {
      if (audioUrl) {
        const msg = await audioRecorderPlayer.startPlayer(audioUrl);
        audioRecorderPlayer.addPlayBackListener(e => {
          console.log(e);
          if (e.currentPosition === e.duration) {
            onStopPlay();
          }
        });
        console.log('Play started:', msg);
      } else {
        console.error('No audio URL provided.');
      }
    } catch (error) {
      console.error('Error starting audio playback:', error);
    }
  };
  const onStopPlay = async () => {
    console.log('onStopPlay');
    audioRecorderPlayer.stopPlayer();
    audioRecorderPlayer.removePlayBackListener();
  };

  const sendMessage = async () => {
    sendChatMessage(chatId, currentuserId, name, newMessage, '', '', '');
    setNewMessage('');
    Keyboard.dismiss();
  };

  const openModal = () => {
    setModalVisible(true);
  };

  const closeModal = () => {
    setModalVisible(false);
  };
  const limit = 10;

  const handleImageChange = async (selectedImageUri: string) => {
    console.log('fdsfsd');

    try {
      const imageUrl = await handleMediaUpload(selectedImageUri);
      if (imageUrl !== undefined) {
        sendChatMessage(chatId, currentuserId, name, '', imageUrl, '', '');
      } else {
        console.log('Image upload failed.');
      }
    } catch (error) {
      console.log('Error uploading image:', error);
    }
  };

  const loadMoreMessages = async () => {
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      const moreMessages = await loadMessages(
        chatId,
        limit,
        lastMessage.timestamp,
      );

      if (moreMessages.length > 0) {
        setMessages(prevMessages => [...prevMessages, ...moreMessages]);
      }
    }
  };
  useEffect(() => {
    const unsubscribe = firestore()
      .collection('chats')
      .doc(chatId)
      .collection('messages')
      .orderBy('timestamp', 'desc')
      .limit(limit)
      .onSnapshot(querySnapshot => {
        const newRealTimeMessages: Message[] = [];
        querySnapshot.forEach(doc => {
          const messageData = doc.data() as Message;
          newRealTimeMessages.push(messageData);
        });

        newRealTimeMessages.sort((a, b) => b.timestamp - a.timestamp);
        setMessages(newRealTimeMessages);
      });

    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, [chatId]);
  const sendDocumentMessage = async (documentURL: string) => {
    sendChatMessage(chatId, currentuserId, name, '', '', documentURL, '');
    setNewMessage('');
    Keyboard.dismiss();
  };

  const pickDocument = async () => {
    try {
      const result = await DocumentPicker.pick({
        type: [DocumentPicker.types.allFiles],
      });

      if (result && result[0]?.uri) {
        console.log('result', result);
        const documentDownloadURL = await handleDocsUpload(result[0].uri);

        if (documentDownloadURL) {
          // Send a message containing the document URL
          sendDocumentMessage(documentDownloadURL);
        } else {
          console.error('Failed to upload document to Firebase Storage.');
        }
      } else {
        console.error('No document selected or URI is null.');
      }
    } catch (err) {
      if (DocumentPicker.isCancel(err)) {
        console.log('cancelled by user');
      } else {
        throw err;
      }
    }
  };

  return (
    <View style={styles.container}>
      <ChatHeader title={name} image={image} activeColor="#2BEF83" />
      <KeyboardAvoidingView
        keyboardVerticalOffset={
          Platform.OS === 'ios' && height > 700 ? scale(10) : 20
        }
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={{justifyContent: 'flex-end', flex: 1}}>
        <FlatList
          data={messages}
          keyExtractor={(message, index) => index.toString()}
          renderItem={({item}) => {
            // console.log(item);
            return (
              <MessageCard
                sender={item.sender}
                name={item.name}
                text={item.text}
                timestamp={item.timestamp}
                imageUrl={item.imageUrl}
                documentUrl={item.documentUrl}
                audioUrl={item.audioUrl}
              />
            );
          }}
          onEndReached={loadMoreMessages}
          onEndReachedThreshold={0.1}
          inverted={true}
        />
        <ImagePicker
          visible={modalVisible}
          onClose={closeModal}
          onSelectImage={imageUri => handleImageChange(imageUri)}
        />

        <View style={styles.wrapper}>
          <Attachment name="attachment" size={26} onPress={pickDocument} />
          <View style={styles.textinput}>
            <Textinput
              placeholder="Message"
              label={false}
              value={newMessage}
              onChangeText={text => setNewMessage(text)}
              keyboardType="default"
            />
          </View>
          {newMessage === '' ? (
            <>
              {isRecording ? (
                <TouchableOpacity onPress={onStopRecord}>
                  <Stop style={styles.icon} name="stop" size={26} />
                </TouchableOpacity>
              ) : (
                <TouchableOpacity onPress={onStartRecord}>
                  <Microphone style={styles.icon} name="microphone" size={26} />
                </TouchableOpacity>
              )}
              <Camera
                style={styles.icon}
                name="camera"
                size={26}
                onPress={openModal}
              />
            </>
          ) : (
            <Send
              onPress={sendMessage}
              style={styles.icon}
              name="send-sharp"
              size={26}
            />
          )}
        </View>
      </KeyboardAvoidingView>
    </View>
  );
};

export default ChatDetailScreen;
